package com.wellhome.groud;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.wellhome.groud.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Void> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserPhone = new Property(0, String.class, "userPhone", false, "USER_PHONE");
        public final static Property UserPassword = new Property(1, String.class, "userPassword", false, "USER_PASSWORD");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property Age = new Property(3, Integer.class, "age", false, "AGE");
        public final static Property UserBirth = new Property(4, java.util.Date.class, "userBirth", false, "USER_BIRTH");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"USER_PHONE\" TEXT," + // 0: userPhone
                "\"USER_PASSWORD\" TEXT," + // 1: userPassword
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"AGE\" INTEGER," + // 3: age
                "\"USER_BIRTH\" INTEGER);"); // 4: userBirth
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(1, userPhone);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(2, userPassword);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(4, age);
        }
 
        java.util.Date userBirth = entity.getUserBirth();
        if (userBirth != null) {
            stmt.bindLong(5, userBirth.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userPhone
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userPassword
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // age
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // userBirth
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserPhone(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserPassword(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAge(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUserBirth(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(User entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(User entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
